===============================================================================
How to set up a MacOSX Mavericks machine for the daily builds
-------------------------------------------------------------------------------


We assume that the machine has a biocbuild account with admin privileges (i.e.
who belongs to the admin group). Note that on the Linux and Windows builders
the biocbuild user is just a regular user with no admin privileges. However,
on a Mac builder, during STAGE5 of the builds (i.e. BUILD BIN step), the
biocbuild user needs to be able to set ownership and group of the files in
the binary packages to root:admin (this is done calling the chown-rootadmin
executable, see below in this document for the details), and then remove all
these files at the beginning of the next run. It needs to belong to the admin
group in order to be able to do this.

Because biocbuild belongs to the admin group, it automatically is a sudoer.
So all the configuration and management of the builds can be done from the
biocbuild account.

Even though they are not needed, the machine can also have personal accounts
with admin provileges for each person that will participate to the
configuration and/or management of the builds.

If biocbuild doesn't belong to the admin group (you can check this with
'id -p biocbuild'), then you can add it by running the following command
from your personal account (granted you belong to the admin group):

    sudo dseditgroup -o edit -a biocbuild -t user admin


From the biocbuild account
--------------------------

** Check the hardware and OS

  - Requirements:
                            strict minimum  recommended
      Nb of logical cores:               8           16
      Memory:                         16GB         32GB

      Hard drive: 256GB if the plan is to run BBS only on the machine. More
      (e.g. 512GB) if the plan is to also run the Single Package Builder.

  - Check nb of logical cores with:

      sysctl -n hw.ncpu

  - Check amount of RAM with:

      system_profiler SPHardwareDataType

  - Check hard drive with:

      system_profiler SPStorageDataType

  - Also make sure that the machine has the latest release of Mavericks i.e.
    OS X 10.9.5 Mavericks. Check this with:

      system_profiler SPSoftwareDataType

  - Check the kernel version (should be Darwin 13 for OS X Mavericks):

      uname -sr

** Check that you can ping the central build node. Depending on whether the
  node you're ssh'ing from is within RPCI's DMZ or not, use its short or
  long (i.e. hostname+domain) hostname. For example:

    ping malbec2                   # from within RPCI's DMZ
    ping malbec2.bioconductor.org  # from anywhere else

** Check that you can ssh to the central build node

  Add .BBS/id_rsa to the biocbuild home (copy id_rsa from another build
  machine). Then chmod 400 .BBS/id_rsa so permissions look like this

    toluca2:~ biocbuild$ ls -l .BBS/id_rsa
    -r--------  1 biocbuild  staff  884 Jan 12 12:19 .BBS/id_rsa

  Then try to ssh to the central build node e.g.

    ssh -i .BBS/id_rsa malbec2                   # from within RPCI's DMZ
    ssh -i .BBS/id_rsa malbec2.bioconductor.org  # from anywhere else

  If this is blocked by RPCI's firewall, after a while you'll get:

    ssh: connect to host malbec2.bioconductor.org port 22: Operation timed out

  Contact the IT folks at RPCI if that's the case:
    Radomski, Matthew <Matthew.Radomski@RoswellPark.org>
    Landsiedel, Timothy <tjlandsi@RoswellPark.org>


** Check that you can send HTTP requests to the central node

    curl "http://malbec2"                  # from within RPCI's DMZ
    curl "http://malbec2.roswellpark.org"  # from anywhere else

  If this is blocked by RPCI's firewall, after a while you'll get:

    curl: (7) Failed connect to malbec2.roswellpark.org:80; Operation timed out

  Contact the IT folks at RPCI if that's the case (see above).

** Install the Command Line Developer Tools

  The Command Line Developer Tools is a subset of Xcode that includes Apple
  LLVM compiler (with Clang front-end), linker, Make, and other developper
  tools that enable Unix-style development at the command line. It's all
  that is needed to install/compile R packages with native code in them (note
  that it even includes the svn and git clients).
  The full Xcode IDE is much bigger (2.6G vs 103M) and is not needed.

  Xcode 6.2 was the last version of Xcode to support OS X 10.9.5 Mavericks so
  we need to get "Command Line Tools (OS X 10.9) for Xcode 6.2".

  Download it from:

    http://adcdownload.apple.com/Developer_Tools/Command_Line_Tools_OS_X_10.9_for_Xcode__Xcode_6.2/commandlinetoolsosx10.9forxcode6.2.dmg

  Install with:

    sudo hdiutil attach commandlinetoolsosx10.9forxcode6.2.dmg
    sudo installer -pkg "/Volumes/Command Line Developer Tools/Command Line Tools (OS X 10.9).pkg" -target /
    sudo hdiutil detach "/Volumes/Command Line Developer Tools"

** Clone BBS git tree

    cd
    git clone https://github.com/bioconductor/BBS

** Compile chown-rootadmin

    cd ~/BBS/utils
    gcc chown-rootadmin.c -o chown-rootadmin
    sudo chown root:admin chown-rootadmin
    sudo chmod 4750 chown-rootadmin

  TESTING: Check that the permissions on chown-rootadmin look like this:

    toluca2:utils biocbuild$ ls -al chown-rootadmin
    -rwsr-x---  1 root  admin  8596 Jan 13 12:55 chown-rootadmin

** Install gfortran

  Download gfortran-4.8.2 from https://gcc.gnu.org/wiki/GFortranBinaries#MacOS

  Install with:

    sudo hdiutil attach gfortran-4.8.2-Mavericks.dmg
    sudo installer -pkg /Volumes/gfortran-4.8.2-Mavericks/gfortran-4.8.2-Mavericks/gfortran.pkg -target /
    sudo hdiutil detach /Volumes/gfortran-4.8.2-Mavericks

    sudo ln -s gfortran gfortran-4.8
    sudo mkdir -p /usr/local/lib/gcc/x86_64-apple-darwin13.0.0
    cd /usr/local/lib/gcc/x86_64-apple-darwin13.0.0
    sudo ln -s /usr/local/gfortran/lib 4.8.2

** Install XQuartz

  Download it from https://xquartz.macosforge.org/

  Install with:

    sudo hdiutil attach XQuartz-2.7.11.dmg
    sudo installer -pkg /Volumes/XQuartz-2.7.11/XQuartz.pkg -target /
    sudo hdiutil detach /Volumes/XQuartz-2.7.11

** Install Homebrew

  Install with:

    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

  TESTING:

    brew doctor

  You might see warnings but you can ignore them.

** Create bbs-3.5-bioc directory structure

    mkdir bbs-3.5-bioc
    cd bbs-3.5-bioc
    mkdir NodeInfo log meat

** Install R

    from Simon's site at AT&T https://r.research.att.com/ for R devel
    (pick up R-devel-mavericks.pkg)

    from CRAN (e.g. https://cloud.r-project.org/bin/macosx/) for R release
    (pick up the 1st file e.g. R-3.3.2.pkg)

  Download with e.g.

    curl -O https://r.research.att.com/mavericks/R-devel/R-devel-mavericks.pkg

  Then install with e.g.

    sudo installer -pkg R-devel-mavericks.pkg -target /

  Note that, unlike what we do on the Linux and Windows builders, this is a
  *system-wide* installation of R i.e. it can be started with 'R' from any
  account.

  TESTING: Start the virtual X server, start R, and check X11:

    # From the shell
    . ~/BBS/utils/start-virtual-X.sh

    # From R
    capabilities()[["X11"]]  # must be TRUE
    X11()                    # nothing visible should happen
    q("no")

    # From the shell
    . ~/BBS/utils/stop-virtual-X.sh

  Then start R and try to install a few packages from source:

    # CRAN packages
    install.packages("Rcpp", type="source")   # contains C++ code
    install.packages("minqa", type="source")  # contains Fortran code

    # Bioconductor packages
    source("http://bioconductor.org/biocLite.R")
    ## ONLY if release and devel are using the same version of R:
    #useDevel()
    biocLite("BiocCheck", type="source")
    biocLite("VariantAnnotation", type="source")

** Install MacTeX

    https://tug.org/mactex/mactex-download.html

  Install with:

    sudo installer -pkg mactex-20161009.pkg -target /

  Add shell_escape = t to /usr/local/texlive/2016/texmf.cnf

    cd /usr/local/texlive/2016/
    sudo cp texmf.cnf texmf.cnf.original
    sudo vi texmf.cnf
    ## add shell_escape = t at the bottom of the file

  TESTING: Try to build a package using pstricks + auto-pst-pdf in its
  vignette e.g.:

    svn co https://hedgehog.fhcrc.org/bioconductor/trunk/madman/Rpacks/affyContam
    R CMD build affyContam

** Install Pandoc

  Download latest Pandoc from https://github.com/jgm/pandoc/releases/latest
  (pick up .pkg file)

  Install with:

    sudo installer -pkg pandoc-1.19.1-osx.pkg -target /

** Add the following entry to biocbuild crontab

    55 17 * * * /bin/bash --login -c 'cd /Users/biocbuild/BBS/3.5/bioc/`hostname -s` && ./run.sh >>/Users/biocbuild/bbs-3.5-bioc/log/`hostname -s`-`date +\%Y\%m\%d`-run.log 2>&1'


===============================================================================
Additional stuff to install for packages with special needs
-------------------------------------------------------------------------------

From the biocbuild account
--------------------------

** Install Java

  Visit https://www.java.com/en/download/faq/develop.xml, then click on the
  "JDK downloads" link, then on the big Java DOWNLOAD button, then pick up
  the Java SE Development Kit for Mac OS X. It's a big (> 220 MB) .dmg file
  named something like jdk-8u111-macosx-x64.dmg

  Install with:

    sudo hdiutil attach jdk-8u111-macosx-x64.dmg
    sudo installer -pkg "/Volumes/JDK 8 Update 111/JDK 8 Update 111.pkg" -target /
    sudo hdiutil detach "/Volumes/JDK 8 Update 111"

  Then reconfigure R to use this new Java installation:

    sudo R CMD javareconf

  TESTING: Try to install the rJava package:

    install.packages("rJava", type="source")
    library(rJava)
    .jinit()
    .jcall("java/lang/System","S","getProperty","java.runtime.version")

** Install JPEG system library

    curl -O http://r.research.att.com/libs/jpeg-9-darwin.13-x86_64.tar.gz
    sudo tar fvxz jpeg-9-darwin.13-x86_64.tar.gz -C /

  TESTING: Try to install the jpeg package:

    install.packages("jpeg", type="source")

#** Install PNG system library
#
#    curl -O http://r.research.att.com/libs/libpng-1.6.17-darwin.13-x86_64.tar.gz
#    sudo tar fvxz libpng-1.6.17-darwin.13-x86_64.tar.gz -C /
#
#  TESTING: Try to install the sysfonts package:
#
#    install.packages("sysfonts", type="source")

** Install TIFF system library

    curl -O http://r.research.att.com/libs/tiff-4.0.3-darwin.13-x86_64.tar.gz
    sudo tar fvxz tiff-4.0.3-darwin.13-x86_64.tar.gz -C /

  TESTING: Try to install the tiff package:

    install.packages("tiff", type="source")

** Install Cairo system library

    curl -O http://r.research.att.com/libs/cairo-1.14.2-darwin.13-x86_64.tar.gz
    sudo tar fvxz cairo-1.14.2-darwin.13-x86_64.tar.gz -C /

  TESTING: Try to install and load the Cairo *binary* package:

    install.packages("Cairo")
    library(Cairo)

  Note: As of Feb 22, 2017, CRAN still does not provide Mac binary packages
  for R 3.4. However, it seems that the Cairo binary made for R 3.3 works
  with R 3.4. Install and load with:

    contriburl <- "http://cran.case.edu/bin/macosx/mavericks/contrib/3.3"
    install.packages("Cairo", contriburl=contriburl)
    library(Cairo)

** Install NetCDF and HDF5 system libray

    curl -O http://r.research.att.com/libs/netcdf-4.3.3.1-darwin.13-x86_64.tar.gz
    curl -O http://r.research.att.com/libs/hdf5-1.8.14-darwin.13-x86_64.tar.gz

    sudo tar fvxz netcdf-4.3.3.1-darwin.13-x86_64.tar.gz -C /
    sudo tar fvxz hdf5-1.8.14-darwin.13-x86_64.tar.gz -C /

  TESTING: Try to install the ncdf4 package:

    install.packages("ncdf4", type="source")

** Install FFTW system library

    curl -O http://r.research.att.com/libs/fftw-3.3.4-darwin.13-x86_64.tar.gz
    sudo tar fvxz fftw-3.3.4-darwin.13-x86_64.tar.gz -C /

  TESTING: Try to install the fftwtools package:

    install.packages("fftwtools", type="source")

** Install GSL system library

    curl -O http://r.research.att.com/libs/gsl-1.16-darwin.13-x86_64.tar.gz
    sudo tar fvxz gsl-1.16-darwin.13-x86_64.tar.gz -C /

  TESTING: Try to install the GLAD package:

    library(BiocInstaller)
    biocLite("GLAD", type="source")

#** Install BOOST system library
#
#    curl -O http://r.research.att.com/libs/boost_1.47.0-darwin9-bin4.tar.bz2
#    sudo tar fvxz boost_1.47.0-darwin9-bin4.tar.bz2 -C /
#
#  TESTING: Try to install the mzR package:
#
#    library(BiocInstaller)
#    biocLite("mzR", type="source")  # takes about 5 min!

** Install GTK2

    curl -O http://r.research.att.com/libs/GTK_2.24.17-X11.pkg
    sudo installer -pkg GTK_2.24.17-X11.pkg -target /

  In /usr/bin create symlink:

    pkg-config -> /Library/Frameworks/GTK+.framework/Resources/bin/pkg-config

  Try:

    which pkg-config

  Then in /etc/profile add:

    export PKG_CONFIG_PATH=/Library/Frameworks/GTK+.framework/Resources/lib/pkgconfig:/usr/lib/pkgconfig:/usr/local/lib/pkgconfig:/usr/X11/lib/pkgconfig

  TESTING: Logout and login again so that the changes to /etc/profile take
  effect. Then try to install the RGtk2 package:

    install.packages("RGtk2", type="source")

** Install MySQL Community Server

  Download mysql-5.7.16-osx10.11-x86_64.dmg from:

    https://downloads.mysql.com/archives/community/

  Install with:

    sudo hdiutil attach mysql-5.7.16-osx10.11-x86_64.dmg
    sudo installer -pkg /Volumes/mysql-5.7.16-osx10.11-x86_64/mysql-5.7.16-osx10.11-x86_64.pkg -target /
    sudo hdiutil detach /Volumes/mysql-5.7.16-osx10.11-x86_64

  Then in /etc/profile append /usr/local/mysql/bin to PATH and
  /usr/local/mysql/lib to DYLD_LIBRARY_PATH.

  TESTING: Logout and login again so that the changes to /etc/profile take
  effect. Then:

    which mysql_config

  Then try to install the RMySQL package:

    install.packages("RMySQL", type="source")

** Install the GNU MP Bignum and GNU MPFR libraries

    curl -O http://r.research.att.com/libs/gmp-6.0.0-darwin.13-x86_64.tar.gz
    sudo tar fvxz gmp-6.0.0-darwin.13-x86_64.tar.gz -C /
    curl -O http://r.research.att.com/libs/mpfr-3.1.2-darwin.13-x86_64.tar.gz
    sudo tar fvxz mpfr-3.1.2-darwin.13-x86_64.tar.gz -C /

  TESTING: Try to install the gmp, Rmpfr, and RankProd packages:

    install.packages("gmp", type="source")    # requires the gmp lib
    install.packages("Rmpfr", type="source")  # requires the mpfr lib
    library(BiocInstaller)
    biocLite("RankProd", type="source")  # requires the gmp and Rmpfr packages

** Install JAGS

  Download with:

    curl -O https://cytranet.dl.sourceforge.net/project/mcmc-jags/JAGS/4.x/Mac%20OS%20X/JAGS-4.2.0.dmg

  Install with:

    sudo hdiutil attach JAGS-4.2.0.dmg
    sudo installer -pkg /Volumes/JAGS-4.2.0/JAGS-4.2.0.mpkg -target /
    sudo hdiutil detach /Volumes/JAGS-4.2.0

  TESTING: Try to install the rjags package:

    install.packages("rjags", type="source")

** Install ImageMagick

  Download first installer from this page:

    http://cactuslab.com/imagemagick/

  e.g.

    curl -O http://cactuslab.com/assets/installers/ImageMagick-6.9.1-0.pkg.zip

  Install with:

    unzip ImageMagick-6.9.1-0.pkg.zip
    sudo installer -pkg ImageMagick-6.9.1-0.pkg -target /

  TESTING: Logout and login again so that the changes to PATH take effect.
  Then:

    which convert

  Then try to build the flowQ package:

    cd ~/bbs-3.5-bioc/meat
    R CMD build flowQ

** Install autoconf & automake

  Install with:

    brew install autoconf
    brew install automake

  TESTING: Try to install the flowWorkspace package:

    library(BiocInstaller)
    biocLite("flowWorkspace", type="source")

** Install Open MPI

  Install with:

    brew install open-mpi  # takes between 15-20 min.

  TESTING:

    install.packages("Rmpi", type="source")
    library(Rmpi)
    mpi.spawn.Rslaves()
    mpi.parReplicate(100, mean(rnorm(1000000)))
    mpi.close.Rslaves()
    mpi.quit()

** Install OpenBabel

  As of Feb 2017, the ChemmineOB package seems to work only with the 2.3 series
  of OpenBabel, not with the 2.2 (too old) or 2.4 (too new) series.

  Do NOT install with 'brew install open-babel' because this installs the
  latest version of OpenBabel (i.e. version 2.4.1 as of Feb 2017) which is
  incompatible with the current ChemmineOB package.

  So we need to compile/install "manually" OpenBabel 2.3 from source.
  Download with:

    curl -O https://master.dl.sourceforge.net/project/openbabel/openbabel/2.3.1/openbabel-2.3.1.tar.gz

  Then (instructions adapted from
  http://openbabel.org/docs/dev/Installation/install.html):

    tar zxvf openbabel-2.3.1.tar.gz
    mkdir build
    cd build
    CXX='g++ -stdlib=libstdc++' cmake ../openbabel-2.3.1
    make
    make install

  TESTING:

    which babel

  Then try to install the ChemmineOB package:

    library(BiocInstaller)
    biocLite("ChemmineOB", type="source")

** Install Python 3 + Jupyter + nbconvert + jupyter_client

  Install with:

    brew install python3
    pip3 install nbconvert
    pip3 install jupyter_client

  TESTING: Install the nbconvertR package and try to run the example in the
  man page for nbconvert():

    install.packages("nbconvertR", type="source")
    library(nbconvertR)
    ?nbconvert  # copy the commented example and run it

** Install ROOT

  Download with:

    https://root.cern.ch/download/root_v5.34.36.macosx64-10.9-clang60.dmg

  Install with:

    sudo hdiutil attach root_v5.34.36.macosx64-10.9-clang60.dmg
    sudo installer -pkg /Volumes/root_v5.34.36.macosx64-10.9-clang60/root_v5.34.36.macosx64-10.9-clang60.mpkg -target /
    sudo hdiutil detach /Volumes/root_v5.34.36.macosx64-10.9-clang60

  Then in /etc/profile append /Applications/root_v5.34.36/bin to PATH and
  /Applications/root_v5.34.36/lib to DYLD_LIBRARY_PATH.

  TESTING: Logout and login again so that the changes to /etc/profile take
  effect. Then:

    which root-config

  Then try to install the xps package:

    library(BiocInstaller)
    biocLite("xps", type="source")

** Install libSBML

  libSBML/rsbml require libxml-2.0 >= 2.6.22 but the version that comes with
  Mavericks is 2.6.16 so we first need to install a more recent libxml-2.0.
  Install a more recent libxml-2.0 with:

    brew install libxml2

  Ignore the "This formula is keg-only..." caveat.

  Then in /etc/profile *prepend* /usr/local/opt/libxml2/lib/pkgconfig to
  PKG_CONFIG_PATH.

  Then logout and login again so that the changes to /etc/profile take
  effect.

  Finally install libSBML with:

    brew install homebrew/science/libsbml

  TESTING: Try to install the rsbml package:

    library(BiocInstaller)
    biocLite("rsbml", type="source")


===============================================================================
How to update R
-------------------------------------------------------------------------------

Perform the following steps:

  1) Rename previous R.framework in /Library/Frameworks/ -> R.framework.old

  2) See "Install R" previously in this file for how to install R.

  3) Configure R to use the Java installed on the machine:

       sudo R CMD javareconf

     TESTING: Try to install the rJava package:

       install.packages("rJava", type="source")

     See "Install Java" previously in this file for more testing.

  4) As of Feb 22, 2017, CRAN still does not provide Mac binary packages for
     R 3.4. Unfortunately some Bioconductor packages depend on CRAN packages
     that are too difficult to install from source. However, for some of these
     CRAN packages, it seems that the binary made for R 3.3 works with R 3.4.
     These packages are:

       Cairo		reuired by a bunch of Bioconductor packages
       rphast, rtfbs	required by cobindR
       udunits2		indirectly required by Pi

     Install them with:

       pkgs <- c("Cairo", "rphast", "rtfbs", "udunits2")
       contriburl <- "http://cran.case.edu/bin/macosx/mavericks/contrib/3.3"
       install.packages(pkgs, contriburl=contriburl)




-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
old stuff

App Store account is:

Apple ID: dtenenba@fhcrc.org
Password: same as biocbuild's password on windows (must be 8 characters)
rescue email: dandante@dandante.com

Dan knows the answers to the security questions


# Setting up RAID

If RAID is already set up on the machine, skip this section.

If RAID is not set up, don't do any further configuration
before reading this section, because you will be erasing
the hard drives and reinstalling the OS, so aything you
set up now will have to be set up again.

Make sure you have a valid App Store account.

To set up RAID, you should first configure the new machine
minimally so that you can at least boot into the OS without
having to do any first-time installation tasks.

Then use Carbon Copy Cloner to clone the hard drive to
an external USB drive. CCC is not free but has a 30 day
trial version that is fully functional. Be sure and clone
the recovery partition onto the USB drive.

Then go to System Preferences / Startup Disk and set the
USB drive as the startup drive.

Power down the machine. Power it back up and hold down
Command-R  when you hear the startup tone.
You can release this key combination
when you see the menu asking
which disk to start from. Choose one that says "Recovery"
followed by the OS version number.

You should boot into recovery mode.

Open Disk Utility.

You are now at step 5 of the following instructions:

http://support.apple.com/kb/HT4886

Continue with the rest of the instructions on that page.


---

Note: After setting up RAID, there is no recovery partition on the
resulting disks. So it's important to keep the USB drive you used
in the RAID setup around. It has a recovery partition which you can
use to repair the RAID disks or do other disaster recovery.

--- After RAID INSTALL

Install OS X Server from App store
Set up host name in OS X server
Allow ssh by administrators and remote (desktop?) access
Allow screen sharing
Set up IP address (DHCP with manual address) in System
Preferences / Networks
Install Xcode from app store
when it's done and installed...

install MacTex
install texinfo from http://r.research.att.com/libs/texinfo-5.2-darwin10.tar.gz
(whatever the most recent version is)
install R, the Mavericks build of course

Install XQuartz from
https://xquartz.macosforge.org/
set up bbs-* and BBS directories, add key to .BBS.
compile the chown-rootadmin program

Does the mavericks-R-fix-flags.sh script work as it should?
(seems to)

From
http://r.research.att.com/libs

Download -

gfortran-4.8.2-darwin13.tar.bz2

This is the recommended Fortran compiler.
I guess, download all the other darwin13 packages?

Simon says it's ok to install darwin10 stuff (except:
"AFAIK only C++ stuff has ABI differences.")


"Currently I'm just using the basics: cairo, fontconfig, freetype, libpng, pitman, pkg-config, tiff, xz

there is a fontconfig patch that needs to be applied, and/or the
new fontconfig stuff from today (4/16/2014) needs to be installed.


"I'll try to get more later - in particular GTK+ and gdal are a pain.""

 trivial cron jobs will work but I could not get the bbs run.sh
cron job to work until after I did:

sudo touch /etc/crontab


install JAGS from source (standard configure/make/make install)
test

install java jvm (not just jre)

install openbabel
---
reconcile with below: need netcdf and hdf5 from simon


update libsbml instructions, build from source,
use configure command
./configure --enable-layout

but be sure and tweak Makefile.in as described below

---- old snow leopard stuff below ----


After a fresh Mavericks install, here are e few things that need to be done
in order to help BBS run smoothly:
--all the below is not yet updated--

Make sure Carl receives syslog messages:

http://wiki.splunk.com/Community:HowTo_Configure_Mac_OS_X_Syslog_To_Forward_Data

Basically all you have to do is add a line to /etc/syslog.conf

*.* @140.107.170.145

and restart the syslogd service. Rebooting also would complete it.


o Install Simon's Fortran compiler and tcltk from here
    http://cran.fhcrc.org/bin/macosx/tools/
    (not sure if tcltk is still needed??? based on Simon's
    email I think we want to avoid installing it until further
    notice. I think it's only necessary for the GUI anyway.)

o Install R. Use CRAN official binary for release or Simon's latest devel build
  from http://r.research.att.com/ for devel.
  Run the usual leopard-R-fix-flags.sh (this should be copied to
  snow-leopard-R-fix-flags.sh) in  /Library/Frameworks/R.framework/Resources/etc/

o Start R. Try X11(), then library(tcltk), then check capabilities().
  Could be that X11() hangs R. This seems to be solved by installing the latest
  X11 from the XQuartz project (see above).

o Install MacTeX. Try to build a package using pstricks + auto-pst-pdf in its
  vignette (e.g. R CMD build affyContam). If it fails, add shell_escape = t
  to /usr/local/texlive/<YYYY>/texmf.cnf
  Put Sweave.sty in ~/Library/texmf/tex/latex and run
  sudo texhash.
  Install texinfo from
  http://r.research.att.com/libs/texinfo-5.2-darwin10.tar.gz
  (whatever the most recent version is.)

o Install graphviz from the official graphviz site. Try 'neato --help'

o Install GSL from:
    http://r.research.att.com/libs/
     (look for gsl-*.tar.gz)
     ?? Not there, however, an old version was on petty
    sudo tar zxf gsl-*.tar.gz -C /
   Make sure any previous installations of GSL have been removed. In particular,
   all /usr/local/lib/libgsl*.dylib files should be removed.
  Try R CMD INSTALL affyILM

o Install other 3rd party libraries provided by Simon at:
    http://R.research.att.com/libs/
  At least:
  tiff, libpng, jpeg, readline, freetype, fontconfig, pixman and cairo

  Be sure and install the "darwin9" version of tiff, even though
  there is a darwin10 version, or it will not work with jpeg,
  which has no darwin10 version (not yet anyway).

  Then start R and try:
    > install.packages("Cairo", type="source")
    > library(Cairo)
    (not sure about this as Cairo is in our special STAGE2 list
    I think it's sufficient to install a binary of Cairo and library() it.)

o Install Simon's ggobi from http://R.research.att.com/libs/
  Add /usr/local/ggobi/lib/pkgconfig to PKG_CONFIG_PATH (in /etc/profile).
  Try:
    pkg-config ggobi --libs
  Then start R and try:
    > install.packages("rggobi", type="source")
    > library(rggobi)
    (I think /usr/local/ggobi/lib also needs to be added to DYLD_LIBRARY_PATH
    but I have not confirmed this)

o Install netcdf and hdf5 from these binaries from Simon:
    http://r.research.att.com/libs/hdf5-1.8.8-darwin9-bin3.tar.gz
    http://r.research.att.com/libs/netcdf-4.1.3-darwin9-bin3.tar.gz
  Make sure that any libnetcdf*dylib or libhdf5*dylib files
  in /usr/local/lib (from any previous installation) are moved out
  of the way.

  Then start R and try:
    > install.packages("ncdf", type="source")
    > library(ncdf)
  Then try:
    R CMD INSTALL xcms
    R CMD INSTALL rhdf5
    R CMD INSTALL ncdfFlow

o Install PostgreSQL (the official PostgreSQL website provides links to
  binaries for MacOSX). The "one click" installer from EnterpriseDB requires
  a 2-step installation (with reboot in between). Use biocbuild's password for
  db superuser (postgres).
  Then try:
    pg_config
  NB: EnterpriseDB installer puts everything under /Library/PostgreSQL/ so
  you need to create symlink:
    pg_config -> /Library/PostgreSQL/9.0/bin/pg_config
  in /usr/bin for the above to work. Then start R and try:
    > install.packages("RPostgreSQL", type="source")
    > library(RPostgreSQL)

LIBSBML:

Install libsbml from http://sourceforge.net/projects/sbml/files/libsbml/5.10.2/stable/Mac%20OS%20X/libsbml-5.10.2-libxml2-macosx-mavericks.dmg/download

Make sure there is a libsbml.pc file in /usr/local/lib/pkgconfig.
It should contain (more or less):

Name: libSBML
Description: An API library for reading/writing/manipulating SBML
URL: http://sbml.org/Software/libSBML
Version: 5.10.2

prefix=/usr/local
exec_prefix=/usr/local
libdir=/usr/local/lib
includedir=/usr/local/include

Libs: -L${libdir}        -lxml2 -lz -lbz2 -lsbml -lstdc++ -lm
Cflags: -I${includedir}
Requires: libxml-2.0 >= 2.6.16

You may need to edit the Version: field. Don't worry about the xml
version stuff (as discussed in the Snow Leopard version of this
document); I think the libxml on Mavericks is new enough that
it's not an issue.
Also, you need to modify libsbml.5.dylib so that it contains its own
location so that code that links to it (rsbml) can find it.
So do this:

    cd /usr/local/lib
    sudo install_name_tool -id "/usr/local/lib/libsbml.5.dylib" libsbml.5.dylib

You can check that it "took" with:

    otool -D libsbml.5.dylib

It should return a fully qualified path to the dylib file.

Failure to do this step will result in binaries that appear to install
just fine on the build machine but will not necessarily install ok
for end users.

  Then add this to /etc/profile:
  export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:/usr/local/lib

  Also make sure that PKGCONFIG contains /usr/local/lib/pkgconfig.


  Finally try R CMD INSTALL rsbml

  Ideally you should then make a binary (using our scripts)
  and try it on a different Mavericks machine.

o Install ROOT.
  Get from source, ftp://root.cern.ch/root/root_v5.34.18.source.tar.gz
  or newer.
  Configure with:
  ./configure macosx64 --with-f77="/usr/bin/gfortran-4.2" --prefix=/usr/local/root
  If you get an error, try
  xcode-select --install
  (You need to be at the console physically or via vnc for the above command)
  Then
  make
  sudo make install

  Then add /usr/local/root/bin to PATH (in /etc/profile).
  Then try:
    which root-config
  Finally try R CMD INSTALL xps

bin/thisroot.sh
...

o If there are problems with packages that use GLX (that is, library(rgl)
  fails), try using the version of the Xvfb executable that is on perceval.
  The problem (described here:
  http://lists.apple.com/archives/x11-users/2012/Dec/msg00056.html
  ) was solved on 12/21/2012 by copying the Xvfb executable from
  perceval to petty. The executable that 'works' is backed up on
  /shared/silo_researcher/Morgan_M/BioC/BBS
  as 'Xvfb', and the one that
  is backed up (did not work) is in the same location as
  'Xvfb.bak.20121221'
  (Don't know if this will work, or if there is still a problem,
  in Snow Leopard)

o Set locale by adding this to /etc/profile:
export LC_ALL=en_US.UTF-8
  If that doesn't work, add it to nodes/NODENAME/local-settings.sh.

o Install openmpi per this page:
https://wiki.helsinki.fi/display/HUGG/Installing+Open+MPI+on+Mac+OS+X
  The configure command should be:
  CFLAGS="-m64"  CXXFLAGS="-m64"  FFLAGS="-m64" ./configure --prefix=/usr/local

(note from Mavericks - it also seems you have to set the following,
e.g. in /etc/profile:
export RMPI_LIB_PATH=/usr/local/lib
export RMPI_INCLUDE=/usr/local/include
export RMPI_TYPE=OPENMPI

)

Install pandoc from
http://johnmacfarlane.net/pandoc/
Then test with
R CMD build ChemmineOB
